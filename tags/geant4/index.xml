<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Geant4 on Welcome to Grant's Pages.</title><link>https://grant-s-z.github.io/Grant/tags/geant4/</link><description>Recent content in Geant4 on Welcome to Grant's Pages.</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 23 Nov 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://grant-s-z.github.io/Grant/tags/geant4/index.xml" rel="self" type="application/rss+xml"/><item><title>Notes of Geant4</title><link>https://grant-s-z.github.io/Grant/p/notes-of-geant4/</link><pubDate>Sat, 23 Nov 2024 00:00:00 +0000</pubDate><guid>https://grant-s-z.github.io/Grant/p/notes-of-geant4/</guid><description>&lt;h2 id="toolkit-fundamentals">Toolkit Fundamentals
&lt;/h2>&lt;h3 id="global-usage-classes">Global Usage Classes
&lt;/h3>&lt;h4 id="signature">Signature
&lt;/h4>&lt;p>为了使用统一的命名方式，遵循 Geant4 的一些约定，Geant4 内核的每一个类的名字都以前缀 G4 开头。为了便于移植，在 Geant4 中使用 G4 类型(G4int, G4float, G4double 等)代替 C 中原有的类型(int, float, double 等)。&lt;/p>
&lt;p>基本类型：G4int, G4long, G4float, G4double, G4bool, G4complex, G4String.&lt;/p>
&lt;p>多数基本类型定义包含了头文件 globals.hh.&lt;/p>
&lt;h3 id="system-of-units">System of Units
&lt;/h3>&lt;h4 id="input">Input
&lt;/h4>&lt;p>必须对引入数据指定单位：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="n">G4double&lt;/span> &lt;span class="n">Size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">15&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">km&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">G4double&lt;/span> &lt;span class="n">density&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">11&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">mg&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">cm3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>对于交互式命令，要求：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">/gun/energy 15.2 keV
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/gun/position 3 2 -7 meter
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="output">Output
&lt;/h4>&lt;p>可以使用喜欢的单位输出数据，只要将这些数据除以相应的单位：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="n">G4cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">KineticEnergy&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">keV&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; keV&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>也可以让 Geant4 来选择使用最合适的单位来输出数据，只要指定用户数据的类别(属于 Length, Time, Energy 等)，例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="n">G4cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">G4BestUnit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">SetpSize&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Length&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="run">Run
&lt;/h3>&lt;h4 id="basic-concept">Basic Concept
&lt;/h4>&lt;p>在 Geant4 中，Run 是一个最大的模拟单位，一个 run 由一系列的事件组成，它是 G4Run 的 一个对象，由 G4RunManager 的方法 beamOn() 启动。在一个 run 过程中，探测器几何，灵敏 探测器设置，和模拟中所使用的物理过程，都保持不变。&lt;/p>
&lt;p>&lt;strong>G4RunManager&lt;/strong> 管理一个 run 的相关进程。其公用方法：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>initialize()&lt;/p>
&lt;p>Geant4 内核必须的所有初始化由该方法触发，包括：&lt;/p>
&lt;ul>
&lt;li>探测器几何&lt;/li>
&lt;li>粒子和物理过程&lt;/li>
&lt;li>反应截面等计算&lt;/li>
&lt;/ul>
&lt;p>该方法必须在首个 run 执行之前调用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>beamOn(G4int numberOfEvent)&lt;/p>
&lt;p>触发一个实际的模拟过程。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>G4UserRunAction&lt;/strong> 是一个用户行为类。其虚拟方法：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>beginOfRunAction()&lt;/p>
&lt;p>在 beamOn() 开始时被调用，常用情形：&lt;/p>
&lt;ul>
&lt;li>设置一个 run 标识数&lt;/li>
&lt;li>登记一个统计图&lt;/li>
&lt;li>设置探测器运行条件&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>endOfRunAction()&lt;/p>
&lt;p>在 beamOn() 结束时被调用，常用情形：&lt;/p>
&lt;ul>
&lt;li>存储/输出统计图&lt;/li>
&lt;li>操作 run 摘要&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="event">Event
&lt;/h3>&lt;p>G4Event 代表一个事件，它是一个包含所有被模拟事件的输入输出信息的类的实例。这个对 象在 G4RunManager 中被创建并传递给 G4EventManager。可以通过 G4RunManager 的方法 getCurrentEvent() 获取当前正在处理的事件指针。&lt;/p>
&lt;h2 id="detector-definition-and-response">Detector Definition and Response
&lt;/h2>&lt;h3 id="geometry">Geometry
&lt;/h3>&lt;h4 id="solid-volume">Solid Volume
&lt;/h4>&lt;p>&lt;strong>Box&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="n">G4Box&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">G4String&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">pName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">G4double&lt;/span> &lt;span class="n">pX&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">G4double&lt;/span> &lt;span class="n">pY&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">G4double&lt;/span> &lt;span class="n">pZ&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>Tube&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="n">G4Tubs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">G4String&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">pName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">G4double&lt;/span> &lt;span class="n">pRMin&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">G4double&lt;/span> &lt;span class="n">pRMax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">G4double&lt;/span> &lt;span class="n">pDz&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">G4double&lt;/span> &lt;span class="n">pSPhi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">G4double&lt;/span> &lt;span class="n">pDPhi&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>Full Solid Sphere&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="n">G4Orb&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">G4String&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">pName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">G4double&lt;/span> &lt;span class="n">pRmax&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="logical-volume">Logical Volume
&lt;/h4>&lt;p>逻辑体管理那些与给定实体和材料的探测器单元有关的信息，与它们在探测器中的物理位置无关。&lt;/p>
&lt;h4 id="physical-volume">Physical Volume
&lt;/h4>&lt;p>物理体指明了那些描述探测器单元的 volumes 的空间位置。&lt;/p>
&lt;h3 id="material">Material
&lt;/h3>&lt;h3 id="electromagnetic-field">Electromagnetic Field
&lt;/h3>&lt;h3 id="hits">Hits
&lt;/h3>&lt;h2 id="tracking-and-physics">Tracking and Physics
&lt;/h2>&lt;h3 id="tracking">Tracking
&lt;/h3>&lt;h3 id="physics-processes">Physics Processes
&lt;/h3>&lt;p>物理过程描述粒子是怎样和物质发生相互作用的。&lt;/p>
&lt;p>每个物理过程都有两组方法，GetPhysicalInteractionLength (GPIL) 和 DoIt，它们在粒子跟踪中扮演重要角色。GPIL 方法给出从当前时空位置到下个时空位置的步长，它根据物理过程的反应截面信息来计算发生反应的概率。在 step 的结尾调用 DoIt 方法。DoIt 方法实现了这个反应的细节，改变粒子的能量、动量、方向和位置，还产生次级粒子（如需要）。&lt;/p>
&lt;h3 id="particles">Particles
&lt;/h3>&lt;p>G4ParticleDefinition 集中了反应一个粒子属性的信息，如名称，质量，自旋，寿命和衰变模式。&lt;/p>
&lt;h3 id="production-threshold-versus-tracking-cut">Production Threshold versus Tracking Cut
&lt;/h3>&lt;h3 id="cuts-per-region">Cuts per Region
&lt;/h3>&lt;h2 id="user-actions">User Actions
&lt;/h2>&lt;h3 id="mandatory-user-actions-and-initializations">Mandatory User Actions and Initializations
&lt;/h3>&lt;p>Geant4 有三个虚类，用户为了实现模拟必须重载它们的方法。它们要求用户定义探测器，指定将要使用的物理过程，并且描述如何初始化将要产生的粒子。&lt;/p>
&lt;ul>
&lt;li>G4VUserDetectorConstruction&lt;/li>
&lt;li>G4VUserPhysicsList&lt;/li>
&lt;li>G4VUserPrimaryGeneratorAction&lt;/li>
&lt;/ul>
&lt;h3 id="optional-user-actions">Optional User Actions
&lt;/h3>&lt;p>有 5 个虚类，用于增强在不同阶段对模拟的控制，用户必须重载这些类的方法。每个 action 类的每个方法都有一个空的缺省实现，允许用户继承并实现期望的类和方法。用户 action 类的对象，必须向 G4RunManager 注册。&lt;/p>
&lt;ul>
&lt;li>G4UserRunAction&lt;/li>
&lt;li>G4UserEventAction&lt;/li>
&lt;li>G4UserStackingAction&lt;/li>
&lt;li>G4UserTrackingAction&lt;/li>
&lt;li>G4UserSteppingAction&lt;/li>
&lt;/ul>
&lt;h2 id="control">Control
&lt;/h2></description></item></channel></rss>